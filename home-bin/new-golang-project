#!/bin/bash
set -euo pipefail

# grab $1 as the "original module name"
origname="${1:?missing reponame}"

# start with reponame as the origname, then prefix with go- if we don't have it
reponame="${origname}"
[[ $reponame =~ ^go- ]] || reponame="go-${reponame}"
# and trimname, get the reponame without the go-prefix; useful for packages
trimname="${reponame/go-/}"
# also, we don't want dashes!
trimname="${trimname//-/}"

# set a coupld of things we may wish to make more configurable down the line
pathPrefix="${NEWGO_PATHPREFIX:-development/chiselwright}"
gomodPrefix="${NEWGO_MODPREFIX:-github.com/chiselwright/}"


mkdir -p "$HOME/${pathPrefix}/${reponame}"
cd       "$HOME/${pathPrefix}/${reponame}"

# run our magical little repo creator
git initial-commit

# initialise the go module
go mod init ${gomodPrefix}${reponame}
git add go.mod
git commit -v --no-verify -m "go mod init ${gomodPrefix}${reponame}"

# create a shell of a main.go, to give us something to test with
mkdir -p cmd/cli-client
cat <<EOF > cmd/cli-client/main.go
package main

import (
	"fmt"

	${trimname} "${gomodPrefix}${reponame}"
)

func main() {
	// do nothing exciting ... for now
	fmt.Println(${trimname}.Global)
}
EOF

# create a simple initial module for main.go to work
cat <<EOF > ${trimname}.go
package ${trimname}

// Global is just a thing you should delete
var Global string = "Hello World"
EOF

cat <<EOF > README.md
# ${reponame}

## Installation

\`\`\`sh
go get ${gomodPrefix}${reponame}
\`\`\`

## cli-client

You can experiment with the library by running:

\`\`\`sh
go run ./cmd/cli-client/main.go
\`\`\`
EOF

git add .
git commit -m 'Skeleton files'

git tt

if type code >/dev/null; then
    code -g ./cmd/cli-client/main.go "$HOME/${pathPrefix}/${reponame}"
fi

echo "# ${reponame} created in $HOME/${pathPrefix}/${reponame}"
